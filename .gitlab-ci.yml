image: acs-public:5000/villas:latest

variables:
  # This registry is a linked docker container running on the same host
  # and configured in gitlab-ci-runner config.toml as a linked service
  DOCKER_REGISTRY: acs-public:5000
  DOCKER_IMAGE: villas:latest
  PREFIX: /usr/

stages:
  - prepare
  - dependencies
  - build
  - test
  - deploy
  
# Templates
##############################################################################
.dep: &dep
  stage: dependencies
  script:
    - make -C thirdparty $CI_BUILD_NAME
  artifacts:
    paths:
      - $PREFIX

.ssh: &ssh
  before_script:
    - mkdir -p $HOME/.ssh
    - echo -e "$SSH_SECRET_KEY" > $HOME/.ssh/id_rsa
    - chmod 600 $HOME/.ssh/id_rsa
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > $HOME/.ssh/config
    - ssh-keyscan -H $DEPLOY_HOST >> $HOME/.ssh/known_hosts

# Stage: prepare
##############################################################################

# Build docker image which is used to build & test VILLASnode
docker-image:
  stage: prepare
  # Must match the docker version on the build machine!
  image: stackbrew/docker:1.8.2
  before_script:
    - docker info
  script:
    - docker build -t $DOCKER_REGISTRY/$DOCKER_IMAGE .
    - docker push $DOCKER_REGISTRY/$DOCKER_IMAGE

# Stage: dependencies
##############################################################################

libwebsockets:
  <<dep: *dep

libxil:
  <<dep: *dep

libxil:
  <<dep: *dep

# Stage: build
##############################################################################

build:
  stage: build
  script:
    - make
  artifacts:
    name: "${CI_PROJECT_NAME}-${CI_BUILD_REF}"
    paths:
      - $PREFIX
  dependencies:
    - libwebsockets
    - libxil

docs:
  stage: build
  artifacts:
    name: "${CI_PROJECT_NAME}-doc-${CI_BUILD_REF}"
    paths:
      - doc/html/
      - doc/latex/
  script:
    - make doc

# Stage: test
##############################################################################

unit:
  stage: test
  dependencies:
    - criterion
    - build
  script:
    - test

integration:
  stage: test
  dependencies:
    - build
  script:
    # Nothing to do here right now
    - true

# Stage: deliver
##############################################################################

deliver:
  stage: deploy
  <<: *ssh
  script:
    - '[ "$CI_BUILD_REF_NAME" == "develop" ] && scp -pr web/landing.html $DEPLOY_USER@$DEPLOY_HOST:$DEPLOY_PATH/index.html'
    - scp -pr doc/html/ $DEPLOY_USER@$DEPLOY_HOST:$DEPLOY_PATH/doc/$CI_BUILD_REF_NAME/
  only:
    - develop
  dependencies:
   - docs

