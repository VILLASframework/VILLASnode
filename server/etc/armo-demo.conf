# This is an example for a minimal loopback configuration.
#
# All messages will be sent back to the origin using UDP packets.
#
# You can use this configuration in conjunction with the 'send', 'receive' and 'random'
# utilities as shown below (run all three steps in parallel).
#
# 0. Overview:
#
#    ./random --PIPE--> ./send  --UDP--> ./server --UDP--> ./receive
#
# 1. Start server:
#
#    $ ./server etc/loopback.conf
#
# 2. Send random data to server:
#
#    $ ./random 4 10 | ./send etc/loopback.conf node1 -r
#
# 3. Receive data from server:
#
#    $ ./receive etc/loopback.conf node2 -r
#
# Author:	Steffen Vogel <stvogel@eonerc.rwth-aachen.de>
# Copyright:	2015, Institute for Automation of Complex Power Systems, EONERC
##

stats = 1;
debug = 2;

nodes = {
	rtds = {
		type = "socket",
		layer = "udp",
		local = "*:13000",		# Local ip:port, use '*' for random port
		remote = "127.0.0.1:13001",
	},
	broker = {
		type = "ngsi",
		endpoint = "https://130.206.112.223:1026",

		timeout = 0.8,
		structure = "children",
		mapping = [
			"fa846ed3-5871-11e5-b0cd-ecf4bb16fe0c(GridSectionDataValue).value(float)",
			"fa8447b8-5871-11e5-a30a-ecf4bb16fe0c(GridSectionDataValue).value(float)"
		//	"rtds_sub1(type_one).value(float)",  // structure = flat:	entityId(entityType).attributeName(attributeType)
		//	"rtds_sub3(type_one).v2(float)",     // structure = children 	parentId(entityType).attributeName(attributeType)
		//	"rtds_sub2(type_two).i1(float)"	     // Example:		fa846ed3-5871-11e5-b0cd-ecf4bb16fe0c(GridSectionDataValue).value(float)
		]
	}
};

paths = (
	{
		in = "rtds",				# Name of the node we listen to (see above)
		out = "broker",				# And we loop back to the origin
		rate = 1				# in Requests / sec
	}
);
